# gemini_translate_app.pyw
import sys
import os
import threading
import json
import requests
from datetime import datetime
import socketio
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QTextEdit, QLabel
from PyQt6.QtGui import QFont, QColor, QTextCharFormat, QTextCursor
from PyQt6.QtCore import Qt

try:
    from win10toast_click import ToastNotifier
    use_win10toast = True
except ImportError:
    use_win10toast = False
    from plyer import notification


# Load config
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

API_KEY = config["API_KEY"]
GEMINI_URL = config["GEMINI_URL"]
SERVER_URL = config["SERVER_URL"]
MAX_LOG_ENTRIES = config["MAX_LOG_ENTRIES"]
HTML_LOG = config["HTML_LOG"]
META_REFRESH_SECONDS = config["META_REFRESH_SECONDS"]


def call_gemini_translate(text, target_language="vi"):
    prompt_text = f"D·ªãch sang ti·∫øng {target_language}, gi·ªØ nguy√™n √Ω nghƒ©a: {text}"
    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY,
    }
    payload = {
        "contents": [
            {
                "parts": [
                    {"text": prompt_text}
                ]
            }
        ]
    }

    try:
        response = requests.post(GEMINI_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data["candidates"][0]["content"]["parts"][0]["text"].strip()
    except Exception as e:
        return f"[L·ªói d·ªãch Gemini]: {e}"

def escape_html(s):
    if s is None:
        return ""
    return (s.replace("&", "&amp;")
             .replace("<", "&lt;")
             .replace(">", "&gt;")
             .replace('"', "&quot;")
             .replace("'", "&#39;"))

def append_log_to_html(original, translated, sender, channel):
    # T·∫°o file n·∫øu ch∆∞a c√≥
    if not os.path.exists(HTML_LOG):
        with open(HTML_LOG, "w", encoding="utf-8") as f:
            f.write(f"""<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Translated Logs</title>
<meta http-equiv="refresh" content="{META_REFRESH_SECONDS}">
<style>
body {{ font-family: sans-serif; background:#f5f5f5; padding:20px; }}
.entry {{ background:white; padding:10px; margin-bottom:10px; border-left:5px solid #4caf50; }}
.timestamp {{ font-size:12px; color:#999; }}
.original {{ margin-top:8px; }}
.translated {{ color:green; margin-top:6px; }}
</style>
</head>
<body>
<h2>üìò L·ªãch s·ª≠ b·∫£n d·ªãch</h2>
<!-- entries appended below -->
</body>
</html>
""")

    # ƒê·ªçc n·ªôi dung c≈©, l·∫•y danh s√°ch entries hi·ªán t·∫°i
    with open(HTML_LOG, "r", encoding="utf-8") as f:
        content = f.read()

    # T√°ch ph·∫ßn gi·ªØa <body> v√† </body> ƒë·ªÉ x·ª≠ l√Ω log entries
    body_start = content.find("<body>")
    body_end = content.rfind("</body>")

    if body_start == -1 or body_end == -1 or body_end <= body_start:
        # Tr∆∞·ªùng h·ª£p file b·ªã h·ªèng ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, ghi l·∫°i m·ªõi
        entries = []
    else:
        body_content = content[body_start+6:body_end]
        # T√°ch c√°c entry qua div.entry
        entries = []
        split_entries = body_content.split('<div class="entry">')
        for part in split_entries[1:]:
            entries.append('<div class="entry">' + part)

    # Th√™m entry m·ªõi v√†o ƒë·∫ßu (ho·∫∑c cu·ªëi t√πy b·∫°n)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = f"""
<div class="entry">
<div class="timestamp">üïí {timestamp}</div>
<b>üë§ @{escape_html(sender)}</b> t·∫°i <code>#{escape_html(channel)}</code>
<div class="original">üí¨ <b>G·ªëc:</b> {escape_html(original)}</div>
<div class="translated">üîÅ <b>D·ªãch:</b> {escape_html(translated)}</div>
</div>
"""
    entries.append(new_entry)

    # Gi·ªõi h·∫°n s·ªë entries t·ªëi ƒëa
    if len(entries) > MAX_LOG_ENTRIES:
        entries = entries[-MAX_LOG_ENTRIES:]  # gi·ªØ 200 entry cu·ªëi c√πng

    # T·∫°o l·∫°i body m·ªõi
    new_body = "\n".join(entries)

    # T·∫°o l·∫°i to√†n b·ªô file
    new_content = content[:body_start+6] + new_body + content[body_end:]

    with open(HTML_LOG, "w", encoding="utf-8") as f:
        f.write(new_content)

class GeminiTranslateApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üì® Ki·ªÉm tra tin nh·∫Øn (k√®m b·∫£n d·ªãch b·∫±ng Gemini)")
        self.resize(650, 450)
        self.setStyleSheet("background-color: #f0f2f5;")

        self.total_count = 0

        self.layout = QVBoxLayout()
        self.label = QLabel("üì® T·ªïng s·ªë tin nh·∫Øn: 0")
        self.label.setFont(QFont("Segoe UI", 16, QFont.Weight.Bold))
        self.label.setStyleSheet("color: #333333;")
        self.layout.addWidget(self.label)

        self.text_log = QTextEdit()
        self.text_log.setReadOnly(True)
        self.text_log.setFont(QFont("Consolas", 12))
        self.text_log.setStyleSheet("background-color: white; border: 1px solid #ccc; padding: 8px;")
        self.layout.addWidget(self.text_log)

        self.setLayout(self.layout)

        self.sio = socketio.Client(reconnection=True, reconnection_attempts=5, reconnection_delay=2)
        self.sio.on("new_message", self.on_new_message)
        self.sio.on("connect", self.on_connect)
        self.sio.on("disconnect", self.on_disconnect)

        # Kh·ªüi t·∫°o file log HTML n·∫øu ch∆∞a c√≥
        if not os.path.exists(HTML_LOG):
            with open(HTML_LOG, "w", encoding="utf-8") as f:
                f.write(f"""<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Translated Logs</title>
<meta http-equiv="refresh" content="{META_REFRESH_SECONDS}">
<style>
body {{ font-family: sans-serif; background:#f5f5f5; padding:20px; }}
.entry {{ background:white; padding:10px; margin-bottom:10px; border-left:5px solid #4caf50; }}
.timestamp {{ font-size:12px; color:#999; }}
.original {{ margin-top:8px; }}
.translated {{ color:green; margin-top:6px; }}
</style>
</head>
<body>
<h2>üìò L·ªãch s·ª≠ b·∫£n d·ªãch</h2>
<!-- entries appended below -->
</body>
</html>
""")

        threading.Thread(target=self.sio.connect, args=(SERVER_URL,), daemon=True).start()

        if use_win10toast:
            self.toaster = ToastNotifier()

    def on_connect(self):
        self.append_log_text("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server.\n")

    def on_disconnect(self):
        self.append_log_text("‚ùå M·∫•t k·∫øt n·ªëi t·ªõi server.\n")

    def append_log_text(self, text, color="#000000"):
        cursor = self.text_log.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        fmt = QTextCharFormat()
        fmt.setForeground(QColor(color))
        cursor.insertText(text, fmt)
        self.text_log.setTextCursor(cursor)
        self.text_log.ensureCursorVisible()

    def on_new_message(self, data):
        sender = data.get("user", "unknown")
        channel = data.get("channel", "unknown")
        original = data.get("original", "")

        def do_translate():
            translated = call_gemini_translate(original, "vi")
            log_text = f"üì© T·ª´ @{sender} trong #{channel}\nüí¨ {original}\nüîÅ {translated}\n---------------------------\n\n"
            self.append_log_text(log_text, "#000000")
            append_log_to_html(original, translated, sender, channel)
            self.total_count += 1
            self.label.setText(f"üì® T·ªïng s·ªë tin nh·∫Øn: {self.total_count}")

            # Hi·ªÉn th·ªã th√¥ng b√°o desktop
            title = f"Tin nh·∫Øn m·ªõi t·ª´ @{sender}"
            message = f"#{channel}: {translated}"

            def on_notification_click():
                self.show()
                self.raise_()
                self.activateWindow()

            if use_win10toast:
                threading.Thread(target=lambda: self.toaster.show_toast(
                    title,
                    message,
                    duration=5,
                    threaded=True,
                    callback_on_click=on_notification_click
                )).start()
            else:
                notification.notify(
                    title=title,
                    message=message,
                    timeout=5
                )
                # plyer kh√¥ng h·ªó tr·ª£ click callback

        threading.Thread(target=do_translate, daemon=True).start()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GeminiTranslateApp()
    window.show()
    sys.exit(app.exec())
