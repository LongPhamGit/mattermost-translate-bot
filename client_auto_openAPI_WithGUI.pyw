# gemini_translate_app.pyw
import sys
import os
import threading
import json
import requests
from datetime import datetime
import socketio
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QTextEdit, QLabel
from PyQt6.QtGui import QFont, QColor, QTextCharFormat, QTextCursor
from PyQt6.QtCore import Qt

# Thay b·∫±ng API key Gemini c·ªßa b·∫°n
API_KEY = "AIzaSyBMFbvl0poru2Xs1mUZfhrlhuYisItGiqQ"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

# Socket.IO server URL
SERVER_URL = "https://mattermost-translate-bot.onrender.com"

# H√†m g·ªçi Gemini API ƒë·ªÉ d·ªãch
def call_gemini_translate(text, target_language="vi"):
    prompt_text = f"D·ªãch sang ti·∫øng {target_language}, gi·ªØ nguy√™n √Ω nghƒ©a: {text}"
    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY,
    }
    payload = {
        "contents": [
            {
                "parts": [
                    {"text": prompt_text}
                ]
            }
        ]
    }

    try:
        response = requests.post(GEMINI_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data["candidates"][0]["content"]["parts"][0]["text"].strip()
    except Exception as e:
        return f"[L·ªói d·ªãch Gemini]: {e}"

def escape_html(s):
    if s is None:
        return ""
    return (s.replace("&", "&amp;")
             .replace("<", "&lt;")
             .replace(">", "&gt;")
             .replace('"', "&quot;")
             .replace("'", "&#39;"))

def append_log_to_html(original, translated, sender, channel):
    HTML_LOG = "translated_log.html"
    META_REFRESH_SECONDS = 5
    if not os.path.exists(HTML_LOG):
        with open(HTML_LOG, "w", encoding="utf-8") as f:
            f.write(f"""<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Translated Logs</title>
<meta http-equiv="refresh" content="{META_REFRESH_SECONDS}">
<style>
body {{ font-family: sans-serif; background:#f5f5f5; padding:20px; }}
.entry {{ background:white; padding:10px; margin-bottom:10px; border-left:5px solid #4caf50; }}
.timestamp {{ font-size:12px; color:#999; }}
.original {{ margin-top:8px; }}
.translated {{ color:green; margin-top:6px; }}
</style>
</head>
<body>
<h2>üìò L·ªãch s·ª≠ b·∫£n d·ªãch</h2>
<!-- entries appended below -->
</body>
</html>
""")

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    html_snip = f"""
<div class="entry">
<div class="timestamp">üïí {timestamp}</div>
<b>üë§ @{sender}</b> t·∫°i <code>#{channel}</code>
<div class="original">üí¨ <b>G·ªëc:</b> {escape_html(original)}</div>
<div class="translated">üîÅ <b>D·ªãch:</b> {escape_html(translated)}</div>
</div>
"""
    with open(HTML_LOG, "r", encoding="utf-8") as f:
        content = f.read()
    idx = content.rfind("</body>")
    if idx == -1:
        new = content + html_snip
    else:
        new = content[:idx] + html_snip + content[idx:]
    with open(HTML_LOG, "w", encoding="utf-8") as f:
        f.write(new)

class GeminiTranslateApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üì® T·ªïng s·ªë tin nh·∫Øn (D·ªãch b·∫±ng Gemini)")
        self.resize(650, 450)
        self.setStyleSheet("background-color: #f0f2f5;")

        self.total_count = 0

        self.layout = QVBoxLayout()
        self.label = QLabel("üì® T·ªïng s·ªë tin nh·∫Øn: 0")
        self.label.setFont(QFont("Segoe UI", 16, QFont.Weight.Bold))
        self.label.setStyleSheet("color: #333333;")
        self.layout.addWidget(self.label)

        self.text_log = QTextEdit()
        self.text_log.setReadOnly(True)
        self.text_log.setFont(QFont("Consolas", 12))
        self.text_log.setStyleSheet("background-color: white; border: 1px solid #ccc; padding: 8px;")
        self.layout.addWidget(self.text_log)

        self.setLayout(self.layout)

        self.sio = socketio.Client(reconnection=True, reconnection_attempts=5, reconnection_delay=2)
        self.sio.on("new_message", self.on_new_message)
        self.sio.on("connect", self.on_connect)
        self.sio.on("disconnect", self.on_disconnect)

        # Kh·ªüi t·∫°o file log HTML
        append_log_to_html("", "", "", "")  # t·∫°o file n·∫øu ch∆∞a c√≥

        threading.Thread(target=self.sio.connect, args=(SERVER_URL,), daemon=True).start()

    def on_connect(self):
        self.append_log_text("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server.\n")

    def on_disconnect(self):
        self.append_log_text("‚ùå M·∫•t k·∫øt n·ªëi t·ªõi server.\n")

    def append_log_text(self, text, color="#000000"):
        cursor = self.text_log.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        fmt = QTextCharFormat()
        fmt.setForeground(QColor(color))
        cursor.insertText(text, fmt)
        self.text_log.setTextCursor(cursor)
        self.text_log.ensureCursorVisible()

    def on_new_message(self, data):
        sender = data.get("user", "unknown")
        channel = data.get("channel", "unknown")
        original = data.get("original", "")
        #self.append_log_text(f"üïí ƒêang d·ªãch tin nh·∫Øn m·ªõi t·ª´ @{sender}...\n", "#0078D7")

        # D·ªãch Gemini trong thread tr√°nh block UI
        def do_translate():
            translated = call_gemini_translate(original, "vi")
            log_text = f"üì© T·ª´ @{sender} trong #{channel}\nüí¨ {original}\nüîÅ {translated}\n---------------------------\n\n"
            self.append_log_text(log_text, "#000000")
            append_log_to_html(original, translated, sender, channel)
            self.total_count += 1
            self.label.setText(f"üì® T·ªïng s·ªë tin nh·∫Øn: {self.total_count}")

        threading.Thread(target=do_translate, daemon=True).start()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GeminiTranslateApp()
    window.show()
    sys.exit(app.exec())
